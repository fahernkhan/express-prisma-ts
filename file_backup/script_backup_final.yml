name: Production Deployment Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  APP_NAME: "express-prisma-ts"
  DOCKER_REGISTRY: "docker.io"

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Linter
        run: npm run lint

      - name: Security Audit
        run: npm audit --production

  unit-tests:
    name: Unit Tests with PostgreSQL
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test -d test"
          --health-interval 5s
          --health-timeout 2s
          --health-retries 20

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Wait for Database
        timeout-minutes: 5
        env:
          DATABASE_URL: postgresql://test:test@postgres:5432/test
        run: |
          curl -sO https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh
          chmod +x wait-for-it.sh
          ./wait-for-it.sh postgres:5432 --timeout=60
          
          # Simple connection test
          for i in {1..5}; do
            pg_isready -h postgres -U test -d test && break
            sleep $i
          done

      - name: Run Migrations
        env:
          DATABASE_URL: postgresql://test:test@postgres:5432/test
        run: |
          npx prisma migrate dev --name init
          npx prisma db push

      - name: Execute Tests
        env:
          DATABASE_URL: postgresql://test:test@postgres:5432/test
        run: npm test

  build-docker:
    name: Build and Push Docker Image
    needs: [code-quality, unit-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-prod:
    name: Deploy to Production
    needs: build-docker
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Backup container saat ini
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:previous || true
            
            # Pull image baru
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest
            
            # Stop dan hapus container lama
            docker stop prod-app || true
            docker rm prod-app || true
            
            # Jalankan container baru
            docker run -d \
              --name prod-app \
              --restart unless-stopped \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest
              
            # Wait dan lakukan migrasi
            sleep 15
            docker exec prod-app npx prisma migrate deploy || {
              echo "Migration failed! Rolling back...";
              docker stop prod-app;
              docker rm prod-app;
              docker run -d \
                --name prod-app \
                --restart unless-stopped \
                -p 3000:3000 \
                -e NODE_ENV=production \
                -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
                ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:previous;
              exit 1;
            }

      - name: Smoke Test
        run: |
          # Tambahkan timeout 10 detik
          timeout 10 bash -c '
            while ! curl -sSf http://${{ secrets.AWS_HOST }}:3000/api/v1/item >/dev/null; do
              sleep 2
            done'
          
          # Test sederhana
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"name":"smoke-test", "price":1000}' \
            http://${{ secrets.AWS_HOST }}:3000/api/v1/item
          
          curl --fail http://${{ secrets.AWS_HOST }}:3000/api/v1/item || {
            echo "Smoke test failed! Triggering rollback...";
            # Panggil API rollback atau trigger manual
            exit 1;
          }

      - name: Rollback Handler
        if: failure()
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.ROLLBACK_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"action":"rollback"}' \
            https://api.example.com/rollback
        timeout-minutes: 5

      - name: Notify Status
        uses: rtCamp/action-slack-notify@v2
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: "Deployment Status - ${{ env.APP_NAME }}"
          SLACK_MESSAGE: |
            *Environment*: Production
            *Status*: ${{ job.status }} 
            *Commit SHA*: \`${{ github.sha }}\`
            *Result*: ${{ job.status }}
            *Duration*: ${{ job.steps[*].duration }}
            *API Endpoint*: http://${{ secrets.AWS_HOST }}:3000
            *Details*: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow>
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}

  post-deploy:
    name: Post-Deploy Checks
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Calculate metrics
        id: metrics
        run: |
          # Get workflow timestamps
          WORKFLOW_DATA=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}")
          
          # Calculate total duration
          CREATED_AT=$(jq -r '.created_at' <<< "$WORKFLOW_DATA")
          UPDATED_AT=$(jq -r '.updated_at' <<< "$WORKFLOW_DATA")
          START_TS=$(date -d "$CREATED_AT" +%s)
          END_TS=$(date -d "$UPDATED_AT" +%s)
          TOTAL_DURATION=$(( END_TS - START_TS ))
          
          # Get all jobs data
          JOBS_DATA=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs")
          
          # Function to calculate job duration
          calculate_job_duration() {
            local job_name=$1
            local job=$(jq -r --arg name "$job_name" '.jobs[] | select(.name == $name)' <<< "$JOBS_DATA")
            local start=$(date -d "$(jq -r '.started_at' <<< "$job")" +%s)
            local end=$(date -d "$(jq -r '.completed_at' <<< "$job")" +%s)
            echo $(( end - start ))
          }
          
          # Get durations for each job
          CODE_QUALITY_DURATION=$(calculate_job_duration "Code Quality Checks")
          BUILD_PUSH_DURATION=$(calculate_job_duration "Build and Push Docker Image")
          DEPLOY_DURATION=$(calculate_job_duration "Deploy to Production")
          POST_DEPLOY_DURATION=$(calculate_job_duration "Post-Deploy Checks")
          
          # Format durations
          format_duration() {
            local seconds=$1
            printf "%dm %ds" $((seconds/60)) $((seconds%60))
          }
          
          echo "TOTAL_DURATION=$(format_duration $TOTAL_DURATION)" >> $GITHUB_ENV
          echo "CODE_QUALITY_DURATION=$(format_duration $CODE_QUALITY_DURATION)" >> $GITHUB_ENV
          echo "BUILD_PUSH_DURATION=$(format_duration $BUILD_PUSH_DURATION)" >> $GITHUB_ENV
          echo "DEPLOY_DURATION=$(format_duration $DEPLOY_DURATION)" >> $GITHUB_ENV
          echo "POST_DEPLOY_DURATION=$(format_duration $POST_DEPLOY_DURATION)" >> $GITHUB_ENV

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: |
            üöÄ *LAPORAN DEPLOYMENT* üöÄ
            
            üìå *Aplikasi*: ${{ env.APP_NAME }}
            ‚è± *Total Durasi*: ${{ env.TOTAL_DURATION }}
            
            üìä *Detail Durasi*:
            - Code Quality: ${{ env.CODE_QUALITY_DURATION }}
            - Build & Push: ${{ env.BUILD_PUSH_DURATION }}
            - Deployment: ${{ env.DEPLOY_DURATION }}
            - Post-Deploy: ${{ env.POST_DEPLOY_DURATION }}
            
            üè∑Ô∏è *Versi*: $(date -u +'%Y.%m.%d').${{ github.run_number }} (${GITHUB_SHA:0:7})
            üïí *Waktu Mulai*: $(date -d "@$START_TS" +"%d %b %Y %H:%M WIB")
            
            üìù *Perubahan Terakhir*:
            "${{ github.event.head_commit.message }}"
            
            üîó *Link Penting*:
            - <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|Detail Kode>
            - <http://${{ secrets.AWS_HOST }}:3000|Akses Aplikasi>
            
            _Dideploy oleh ${{ github.actor }} via GitHub Actions_