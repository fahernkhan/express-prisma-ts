name: Production Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  APP_NAME: "express-prisma-ts"
  DOCKER_REGISTRY: "docker.io"

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Linter
        run: npm run lint

      - name: Security Audit
        run: npm audit --production

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test -d test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm ci

      - name: Wait for Database
        timeout-minutes: 2
        run: |
          curl -O https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh
          chmod +x wait-for-it.sh
          ./wait-for-it.sh postgres:5432 --timeout=30

      - name: Run Migrations
        env:
          DATABASE_URL: postgresql://test:test@postgres:5432/test
        run: npx prisma migrate dev --name init

      - name: Execute Tests
        env:
          DATABASE_URL: postgresql://test:test@postgres:5432/test
        run: npm test

  build-docker:
    name: Build & Push Image
    needs: [code-quality, unit-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-prod:
    name: Deploy to Production
    needs: build-docker
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Cleanup previous deployment
            docker stop prod-app || true
            docker rm prod-app || true
            
            # Pull latest image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest
            
            # Run container
            docker run -d \
              --name prod-app \
              --restart unless-stopped \
              -p 3000:3000 \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e NODE_ENV=production \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest
            
            # Wait for app to initialize
            sleep 15
            
            # Run migrations
            docker exec prod-app npx prisma migrate deploy
            
            # Cleanup
            docker image prune -af --filter "until=24h"

      - name: Smoke Test
        run: |
          # Test CREATE
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"name":"ci-test", "price":1000}' \
            --retry 3 \
            --retry-delay 5 \
            --fail-with-body \
            http://${{ secrets.AWS_HOST }}:3000/api/v1/item

          # Test READ
          curl --fail \
            --retry 3 \
            --retry-delay 5 \
            http://${{ secrets.AWS_HOST }}:3000/api/v1/item

      - name: Notify Status
        uses: rtCamp/action-slack-notify@v2
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: "Deployment Status - ${{ env.APP_NAME }}"
          SLACK_MESSAGE: |
            *Environment*: Production
            *Commit*: \`${{ github.sha }}\`
            *Result*: ${{ job.status }}
            *Duration*: ${{ job.steps[*].duration }}