name: Production Deployment Pipeline

on:
  push:
    branches: [main]

env:
  APP_NAME: "express-prisma-ts"
  DOCKER_REGISTRY: "docker.io"

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Lint Check
        run: npm run lint

  build-push:
    name: Build and Push Docker Image
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    needs: build-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Graceful shutdown
            docker stop app --timeout 30 || true
            docker rm -f app || true
            
            # Pull image terbaru
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest
            
            # Run container dengan health check berdasarkan endpoint yang ada
            docker run -d \
              --name app \
              --restart unless-stopped \
              --health-cmd "curl -sSf http://localhost:3000/api/v1/item >/dev/null || exit 1" \
              --health-interval 15s \
              --health-timeout 10s \
              --health-retries 5 \
              -p 3000:3000 \
              -e DATABASE_URL="${{ secrets.DATABASE_URL}}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest

            # Tunggu inisialisasi
            echo "Menunggu aplikasi siap..."
            timeout 180 bash -c '
              while ! docker inspect --format="{{.State.Health.Status}}" app | grep -q "healthy"; do
                sleep 10
                echo "Status: $(docker inspect --format="{{.State.Health.Status}}" app)"
              done
            ' || exit 1

            # Jalankan migrasi
            echo "Menjalankan database migrations..."
            docker exec app npx prisma migrate deploy

      - name: API Test
        run: |
          set -e
          echo "Testing Create Item..."
          curl --fail --location "http://${{ secrets.AWS_HOST }}:3000/api/v1/item" \
            --header "Content-Type: application/json" \
            --data '{"name":"banana", "price":15000}'

          echo -e "\nTesting Get Items..."
          curl --fail --location "http://${{ secrets.AWS_HOST }}:3000/api/v1/item"

  post-deploy:
    name: Post-Deploy Checks
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Calculate metrics
        id: metrics
        run: |
          # Hitung durasi job ini saja
          START_TS=${{ steps.metrics.outputs.start_time }}
          END_TS=$(date +%s)
          echo "DURATION_SEC=$(( END_TS - START_TS ))" >> $GITHUB_ENV
          echo "DURATION_MIN=$(( (END_TS - START_TS + 30) / 60 ))" >> $GITHUB_ENV
          
          # Generate version info
          echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV
          echo "VERSION=$(date -u +'%Y.%m.%d').${{ github.run_number }}" >> $GITHUB_ENV
        env:
          START_TIME: ${{ steps.get_time.outputs.start_time }}

      - name: Get start time
        id: get_time
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: |
            🚀 *UPDATE PRODUKSI* 🚀
            
            *Aplikasi*: ${{ env.APP_NAME }}
            *Versi*: ${{ env.VERSION }} (${{ env.SHORT_SHA }})
            *Status*: ${{ job.status == 'success' && 'BERHASIL ✅' || 'GAGAL ❌' }}
            *Durasi*: ${{ env.DURATION_SEC }} detik (~${{ env.DURATION_MIN }} menit)
            
            *Perubahan Terbaru*:
            "${{ github.event.head_commit.message }}"
            
            *Link Penting*:
            🔗 <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|Detail Kode (${{ env.SHORT_SHA }})>
            🌍 <http://${{ secrets.AWS_HOST }}:3000|Akses Aplikasi>
            
            _Deployed by ${{ github.actor }} via GitHub Actions_