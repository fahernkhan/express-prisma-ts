name: Production Deployment Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  APP_NAME: express-prisma-ts
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}

jobs:
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
      
      - name: Linter Check
        run: npm run lint
        
      - name: Security Audit
        run: npm audit --production

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Install Dependencies
        run: npm ci
      
      - name: Run Database Migrations
        env:
          DATABASE_URL: postgresql://test:test@postgres:5432/test
        run: npx prisma migrate dev --name init
      
      - name: Execute Tests
        env:
          DATABASE_URL: postgresql://test:test@postgres:5432/test
        run: npm test

  build-image:
    name: Build & Push Docker Image
    needs: [quality-checks, unit-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build Production Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-production:
    name: Deploy to Production
    needs: build-image
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Pull latest image
            docker pull ${{ env.DOCKER_IMAGE }}:latest
            
            # Stop existing container
            docker stop production-app || true
            docker rm production-app || true
            
            # Start new container
            docker run -d \
              --name production-app \
              --restart unless-stopped \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              ${{ env.DOCKER_IMAGE }}:latest
            
            # Run database migrations
            sleep 10 # Wait for app to initialize
            docker exec production-app npx prisma migrate deploy
            
            # Cleanup old images
            docker image prune -af --filter "until=24h"
      
      - name: Verify Deployment
        run: |
          curl --fail-with-body \
            --retry 3 \
            --retry-delay 5 \
            http://${{ secrets.AWS_HOST }}:3000/health
          
      - name: Send Notification
        uses: rtCamp/action-slack-notify@v2
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status == 'success' && '#36a64f' || '#ff0000' }}
          SLACK_TITLE: "Deployment Status: ${{ job.status }}"
          SLACK_MESSAGE: |
            *Application*: ${{ env.APP_NAME }}
            *Environment*: Production
            *Commit*: \`${{ github.sha }}\`
            *Duration*: ${{ job.steps[*].duration }}