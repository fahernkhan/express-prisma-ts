name: Production Deployment Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  APP_NAME: "express-prisma-ts"
  DOCKER_REGISTRY: "docker.io"

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Linter
        run: npm run lint

      - name: Security Audit
        run: npm audit --production

  build-docker:
    name: Build and Push Docker Image
    needs: [code-quality]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-prod:
    name: Deploy to Production
    needs: [build-docker]
    runs-on: ubuntu-latest
    environment: production
    env:
      DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/express-prisma-ts:latest
      PREV_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/express-prisma-ts:previous
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Backup image sebelumnya
            docker tag $DOCKER_IMAGE $PREV_IMAGE || true
            
            # Hapus container lama dengan paksa
            docker rm -f prod-app || true
            
            # Pull image terbaru
            docker pull "$DOCKER_IMAGE"
            
            # Jalankan container baru
            docker run -d \
              --name prod-app \
              --restart unless-stopped \
              --health-cmd "curl -f http://localhost:3000/api/v1/health" \
              --health-interval 10s \
              -p 3000:3000 \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              "$DOCKER_IMAGE"
              
            # Tunggu maksimal 30 detik
            timeout 30 bash -c '
              while [ "$(docker inspect -f "{{.State.Health.Status}}" prod-app)" != "healthy" ]; do
                sleep 3
              done'
            
            # Lakukan migrasi
            docker exec prod-app npx prisma migrate deploy || {
              echo "Migration failed! Rolling back..."
              docker rm -f prod-app
              docker run -d \
                --name prod-app \
                -p 3000:3000 \
                "$PREV_IMAGE"
              exit 1
            }

      - name: Smoke Test
        run: |
          # Gunakan timeout 20 detik
          timeout 20 bash -c '
            until curl -sf http://${{ secrets.AWS_HOST }}:3000/api/v1/item; do
              sleep 2
            done'
          
          # Test CRUD
          ITEM_ID=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d '{"name":"smoke-test","price":1000}' \
            http://${{ secrets.AWS_HOST }}:3000/api/v1/item | jq -r '.id')
          
          curl --fail http://${{ secrets.AWS_HOST }}:3000/api/v1/item/$ITEM_ID