name: Production Deployment Pipeline

on:
  push:
    branches: [main]

env:
  APP_NAME: "express-prisma-ts"
  DOCKER_REGISTRY: "docker.io"

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Lint Check
        run: npm run lint

  build-push:
    name: Build and Push Docker Image
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    needs: build-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Graceful shutdown dengan timeout 30 detik
            docker stop app --timeout 30 || true
            docker rm -f app || true
            
            # Pull image dengan progress plain
            docker pull --quiet ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest
            
            # Run container dengan health check yang lebih toleran
            docker run -d \
              --name app \
              --restart unless-stopped \
              --health-cmd "curl -sSf http://localhost:3000/api/v1/health >/dev/null || exit 1" \
              --health-interval 15s \
              --health-timeout 10s \
              --health-retries 5 \
              -p 3000:3000 \
              -e DATABASE_URL="${{ secrets.DATABASE_URL}}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest

            # Wait for container dengan retry mechanism
            echo "Menunggu inisialisasi container..."
            timeout 180 bash -c '
              while ! docker inspect --format="{{.State.Health.Status}}" app | grep -q "healthy"; do
                sleep 10
                echo "Status kesehatan: $(docker inspect --format="{{.State.Health.Status}}" app)"
              done
            ' || exit 1

            # Jalankan migrasi database
            echo "Menjalankan database migrations..."
            docker exec app npx prisma migrate deploy --skip-seed

            # Cleanup dengan safety check
            docker image prune -af --filter "until=24h" --force
          timeout: 15m

      - name: Smoke Test
        run: |
          set -e
          echo "Performing smoke test..."
          curl --fail --retry 5 --retry-delay 10 http://${{ secrets.AWS_HOST }}:3000/api/v1/health
          
          echo "Testing CRUD operations..."
          ITEM_ID=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d '{"name":"smoke-test","price":1000}' \
            http://${{ secrets.AWS_HOST }}:3000/api/v1/item | jq -r '.id')
          
          curl --fail http://${{ secrets.AWS_HOST }}:3000/api/v1/item/$ITEM_ID
          curl -X DELETE --fail http://${{ secrets.AWS_HOST }}:3000/api/v1/item/$ITEM_ID

  post-deploy:
    name: Post-Deploy Checks
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: "Deployment Status - ${{ env.APP_NAME }}"
          SLACK_MESSAGE: |
            *Status*: ${{ job.status }} 
            *Commit*: \`${{ github.sha }}\`
            *Environment*: Production
            *Details*: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}